(ns wowman.curseforge-api
  (:require
   [wowman
    [http :as http]
    [specs :as sp]
    [utils :as utils :refer [to-int to-json fmap join from-epoch to-uri]]]
   [slugify.core :refer [slugify]]
   [clojure.spec.alpha :as s]
   [orchestra.spec.test :as st]
   [orchestra.core :refer [defn-spec]]
   [taoensso.timbre :as log :refer [debug info warn error spy]]))

(def curseforge-api "https://addons-ecs.forgesvc.net/api/v2")

(defn-spec api-uri ::sp/uri
  [path string?, & args (s/* any?)]
  (str curseforge-api (apply format path args)))

(defn latest-versions-by-game-track
  "given a curseforge-api result, returns a map of release data"
  [api-result]

  ;; 'latestFiles' :
  ;; - gameVersionFlavour: that is either "wow_retail" or "wow_classic"
  ;; - fileStatus: 4 means ... ?
  ;; - releaseType: 1 is regular, 2 is beta, 3 is alpha
  ;; - exposeAsAlternative: nil is no, true is yes
  ;;    - see Recount. there is a '-nolib' alternative available.

  ;; we want to say "give me the latest stable release of the wow classic track of this addon
  ;; for now we're going to ignore anything that isn't a releaseType of 1

  (let [latest-files (:latestFiles api-result)

        ;; results appear sorted, but lets be sure because we'll be taking the most recent
        desc (comp - compare) ;; most to least recent (desc)
        latest-files (sort-by :fileDate desc latest-files)

        ;; stable releases only, for now
        stable 1 ;; 2 is beta, 3 is alpha
        stable-releases (filterv #(= (:releaseType %) stable) latest-files)

        ;; no alternative versions, for now
        stable-releases (remove :exposeAsAlternative stable-releases)

        ;; I don't know if it's possible, but a group may still have more than one result
        ;; results are ordered and group-by preserves ordering desc, so take the first
        ]
    (group-by :gameVersionFlavor stable-releases)))

(defn-spec expand-summary (s/or :ok ::sp/addon, :error nil?)
  "given a summary, adds the remaining attributes that couldn't be gleaned from the summary page. one additional look-up per ::addon required"
  [addon-summary ::sp/addon-summary game-track ::sp/game-track]
  (let [pid (-> addon-summary :source-id)
        uri (api-uri "/addon/%s" pid)
        result (-> uri http/download utils/from-json)

        game-track-alias-map {"retail" "wow_retail"
                              "classic" "wow_classic"}
        game-track-alias (game-track-alias-map game-track)

        latest-release (-> result latest-versions-by-game-track (get game-track-alias) first)]
    (when-not latest-release
      (warn (format "no '%s' release available for '%s'" game-track (:name addon-summary))))
    (when latest-release
      (let [;; api value is empty in some cases (carbonite, improved loot frames, skada damage meter)
            ;; this value overrides the one found in .toc files, so if it can't be scraped, use the .toc version
            interface-version (some-> latest-release :gameVersion first utils/game-version-to-interface-version)
            interface-version (when interface-version {:interface-version interface-version})

            details {:download-uri (:downloadUrl latest-release)
                     :version (:displayName latest-release)}]
        (merge addon-summary details interface-version)))))

(defn-spec extract-addon-summary ::sp/addon-summary
  "converts addon data extracted from a listing into an ::sp/addon-summary"
  [snippet map?] ;; TODO: spec out curseforge results? eh.
  {:uri (:websiteUrl snippet)
   :label (:name snippet)
   :name (:slug snippet)
   ;; to be removed. helps with fuzzy matching toc data but should be generated by the catalog if we want to keep it
   :alt-name (-> snippet :name (slugify ""))
   :description (:summary snippet)
   ;; I don't think order is significant. it certainly differs between website and api
   ;; this cuts down on noise in diffs
   :category-list (sort (mapv :name (:categories snippet)))
   :created-date (:dateCreated snippet) ;; omg *yes*. perfectly formed dates
   ;; we now have :dateModified and :dateReleased to pick from
   ;; :dateReleased (:fileDate of latest release) appears to be closest to what was being scraped
   ;;:updated-date (:dateModified snippet)
   :updated-date (:dateReleased snippet)
   :download-count (-> snippet :downloadCount int) ;; I got a '511.0' ...?
   :source-id (:id snippet) ;; I imagine wowinterface will have its own as well
   })

(defn-spec download-summary-page-alphabetically (s/or :ok (s/coll-of map?), :error nil?)
  "downloads a page of results from the curseforge API, sorted A to Z"
  [page int? page-size pos-int?]
  (info "downloading" page-size "results from api, page" page)
  (let [index (* page-size page) ;; +1 ?
        game-id 1 ;; WoW
        sort-by 3 ;; alphabetically, asc (a-z)
        results (http/download (api-uri "/addon/search?gameId=%s&index=%s&pageSize=%s&searchFilter=&sort=%s" game-id index page-size sort-by))
        results (utils/from-json results)]
    (mapv extract-addon-summary results)))

(defn-spec download-all-summaries-alphabetically (s/or :ok ::sp/addon-summary-list, :error nil?)
  []
  (loop [page 0
         accumulator []]
    (let [page-size 255
          results (download-summary-page-alphabetically page page-size)
          num-results (count results)]
      (if (< num-results page-size)
        (into accumulator results) ;; short page, exit loop
        (recur (inc page)
               (into accumulator results))))))

(st/instrument)
